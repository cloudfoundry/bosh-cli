// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cloudfoundry/bosh-cli/stemcell (interfaces: CloudStemcell,Manager)

// Package mocks is a generated GoMock package.
package mocks

import (
	stemcell "github.com/cloudfoundry/bosh-cli/stemcell"
	ui "github.com/cloudfoundry/bosh-cli/ui"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCloudStemcell is a mock of CloudStemcell interface
type MockCloudStemcell struct {
	ctrl     *gomock.Controller
	recorder *MockCloudStemcellMockRecorder
}

// MockCloudStemcellMockRecorder is the mock recorder for MockCloudStemcell
type MockCloudStemcellMockRecorder struct {
	mock *MockCloudStemcell
}

// NewMockCloudStemcell creates a new mock instance
func NewMockCloudStemcell(ctrl *gomock.Controller) *MockCloudStemcell {
	mock := &MockCloudStemcell{ctrl: ctrl}
	mock.recorder = &MockCloudStemcellMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCloudStemcell) EXPECT() *MockCloudStemcellMockRecorder {
	return m.recorder
}

// CID mocks base method
func (m *MockCloudStemcell) CID() string {
	ret := m.ctrl.Call(m, "CID")
	ret0, _ := ret[0].(string)
	return ret0
}

// CID indicates an expected call of CID
func (mr *MockCloudStemcellMockRecorder) CID() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CID", reflect.TypeOf((*MockCloudStemcell)(nil).CID))
}

// Delete mocks base method
func (m *MockCloudStemcell) Delete() error {
	ret := m.ctrl.Call(m, "Delete")
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockCloudStemcellMockRecorder) Delete() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCloudStemcell)(nil).Delete))
}

// Name mocks base method
func (m *MockCloudStemcell) Name() string {
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name
func (mr *MockCloudStemcellMockRecorder) Name() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockCloudStemcell)(nil).Name))
}

// PromoteAsCurrent mocks base method
func (m *MockCloudStemcell) PromoteAsCurrent() error {
	ret := m.ctrl.Call(m, "PromoteAsCurrent")
	ret0, _ := ret[0].(error)
	return ret0
}

// PromoteAsCurrent indicates an expected call of PromoteAsCurrent
func (mr *MockCloudStemcellMockRecorder) PromoteAsCurrent() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PromoteAsCurrent", reflect.TypeOf((*MockCloudStemcell)(nil).PromoteAsCurrent))
}

// Version mocks base method
func (m *MockCloudStemcell) Version() string {
	ret := m.ctrl.Call(m, "Version")
	ret0, _ := ret[0].(string)
	return ret0
}

// Version indicates an expected call of Version
func (mr *MockCloudStemcellMockRecorder) Version() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Version", reflect.TypeOf((*MockCloudStemcell)(nil).Version))
}

// MockManager is a mock of Manager interface
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
}

// MockManagerMockRecorder is the mock recorder for MockManager
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// DeleteUnused mocks base method
func (m *MockManager) DeleteUnused(arg0 ui.Stage) error {
	ret := m.ctrl.Call(m, "DeleteUnused", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUnused indicates an expected call of DeleteUnused
func (mr *MockManagerMockRecorder) DeleteUnused(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUnused", reflect.TypeOf((*MockManager)(nil).DeleteUnused), arg0)
}

// FindCurrent mocks base method
func (m *MockManager) FindCurrent() ([]stemcell.CloudStemcell, error) {
	ret := m.ctrl.Call(m, "FindCurrent")
	ret0, _ := ret[0].([]stemcell.CloudStemcell)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindCurrent indicates an expected call of FindCurrent
func (mr *MockManagerMockRecorder) FindCurrent() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindCurrent", reflect.TypeOf((*MockManager)(nil).FindCurrent))
}

// FindUnused mocks base method
func (m *MockManager) FindUnused() ([]stemcell.CloudStemcell, error) {
	ret := m.ctrl.Call(m, "FindUnused")
	ret0, _ := ret[0].([]stemcell.CloudStemcell)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUnused indicates an expected call of FindUnused
func (mr *MockManagerMockRecorder) FindUnused() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUnused", reflect.TypeOf((*MockManager)(nil).FindUnused))
}

// Upload mocks base method
func (m *MockManager) Upload(arg0 stemcell.ExtractedStemcell, arg1 ui.Stage) (stemcell.CloudStemcell, error) {
	ret := m.ctrl.Call(m, "Upload", arg0, arg1)
	ret0, _ := ret[0].(stemcell.CloudStemcell)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Upload indicates an expected call of Upload
func (mr *MockManagerMockRecorder) Upload(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upload", reflect.TypeOf((*MockManager)(nil).Upload), arg0, arg1)
}
