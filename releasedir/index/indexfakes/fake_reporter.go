// Code generated by counterfeiter. DO NOT EDIT.
package indexfakes

import (
	"sync"

	"github.com/cloudfoundry/bosh-cli/v6/releasedir/index"
)

type FakeReporter struct {
	IndexEntryDownloadFinishedStub        func(string, string, error)
	indexEntryDownloadFinishedMutex       sync.RWMutex
	indexEntryDownloadFinishedArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 error
	}
	IndexEntryDownloadStartedStub        func(string, string)
	indexEntryDownloadStartedMutex       sync.RWMutex
	indexEntryDownloadStartedArgsForCall []struct {
		arg1 string
		arg2 string
	}
	IndexEntryFinishedAddingStub        func(string, string, error)
	indexEntryFinishedAddingMutex       sync.RWMutex
	indexEntryFinishedAddingArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 error
	}
	IndexEntryStartedAddingStub        func(string, string)
	indexEntryStartedAddingMutex       sync.RWMutex
	indexEntryStartedAddingArgsForCall []struct {
		arg1 string
		arg2 string
	}
	IndexEntryUploadFinishedStub        func(string, string, error)
	indexEntryUploadFinishedMutex       sync.RWMutex
	indexEntryUploadFinishedArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 error
	}
	IndexEntryUploadStartedStub        func(string, string)
	indexEntryUploadStartedMutex       sync.RWMutex
	indexEntryUploadStartedArgsForCall []struct {
		arg1 string
		arg2 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeReporter) IndexEntryDownloadFinished(arg1 string, arg2 string, arg3 error) {
	fake.indexEntryDownloadFinishedMutex.Lock()
	fake.indexEntryDownloadFinishedArgsForCall = append(fake.indexEntryDownloadFinishedArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 error
	}{arg1, arg2, arg3})
	stub := fake.IndexEntryDownloadFinishedStub
	fake.recordInvocation("IndexEntryDownloadFinished", []interface{}{arg1, arg2, arg3})
	fake.indexEntryDownloadFinishedMutex.Unlock()
	if stub != nil {
		fake.IndexEntryDownloadFinishedStub(arg1, arg2, arg3)
	}
}

func (fake *FakeReporter) IndexEntryDownloadFinishedCallCount() int {
	fake.indexEntryDownloadFinishedMutex.RLock()
	defer fake.indexEntryDownloadFinishedMutex.RUnlock()
	return len(fake.indexEntryDownloadFinishedArgsForCall)
}

func (fake *FakeReporter) IndexEntryDownloadFinishedCalls(stub func(string, string, error)) {
	fake.indexEntryDownloadFinishedMutex.Lock()
	defer fake.indexEntryDownloadFinishedMutex.Unlock()
	fake.IndexEntryDownloadFinishedStub = stub
}

func (fake *FakeReporter) IndexEntryDownloadFinishedArgsForCall(i int) (string, string, error) {
	fake.indexEntryDownloadFinishedMutex.RLock()
	defer fake.indexEntryDownloadFinishedMutex.RUnlock()
	argsForCall := fake.indexEntryDownloadFinishedArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeReporter) IndexEntryDownloadStarted(arg1 string, arg2 string) {
	fake.indexEntryDownloadStartedMutex.Lock()
	fake.indexEntryDownloadStartedArgsForCall = append(fake.indexEntryDownloadStartedArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.IndexEntryDownloadStartedStub
	fake.recordInvocation("IndexEntryDownloadStarted", []interface{}{arg1, arg2})
	fake.indexEntryDownloadStartedMutex.Unlock()
	if stub != nil {
		fake.IndexEntryDownloadStartedStub(arg1, arg2)
	}
}

func (fake *FakeReporter) IndexEntryDownloadStartedCallCount() int {
	fake.indexEntryDownloadStartedMutex.RLock()
	defer fake.indexEntryDownloadStartedMutex.RUnlock()
	return len(fake.indexEntryDownloadStartedArgsForCall)
}

func (fake *FakeReporter) IndexEntryDownloadStartedCalls(stub func(string, string)) {
	fake.indexEntryDownloadStartedMutex.Lock()
	defer fake.indexEntryDownloadStartedMutex.Unlock()
	fake.IndexEntryDownloadStartedStub = stub
}

func (fake *FakeReporter) IndexEntryDownloadStartedArgsForCall(i int) (string, string) {
	fake.indexEntryDownloadStartedMutex.RLock()
	defer fake.indexEntryDownloadStartedMutex.RUnlock()
	argsForCall := fake.indexEntryDownloadStartedArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeReporter) IndexEntryFinishedAdding(arg1 string, arg2 string, arg3 error) {
	fake.indexEntryFinishedAddingMutex.Lock()
	fake.indexEntryFinishedAddingArgsForCall = append(fake.indexEntryFinishedAddingArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 error
	}{arg1, arg2, arg3})
	stub := fake.IndexEntryFinishedAddingStub
	fake.recordInvocation("IndexEntryFinishedAdding", []interface{}{arg1, arg2, arg3})
	fake.indexEntryFinishedAddingMutex.Unlock()
	if stub != nil {
		fake.IndexEntryFinishedAddingStub(arg1, arg2, arg3)
	}
}

func (fake *FakeReporter) IndexEntryFinishedAddingCallCount() int {
	fake.indexEntryFinishedAddingMutex.RLock()
	defer fake.indexEntryFinishedAddingMutex.RUnlock()
	return len(fake.indexEntryFinishedAddingArgsForCall)
}

func (fake *FakeReporter) IndexEntryFinishedAddingCalls(stub func(string, string, error)) {
	fake.indexEntryFinishedAddingMutex.Lock()
	defer fake.indexEntryFinishedAddingMutex.Unlock()
	fake.IndexEntryFinishedAddingStub = stub
}

func (fake *FakeReporter) IndexEntryFinishedAddingArgsForCall(i int) (string, string, error) {
	fake.indexEntryFinishedAddingMutex.RLock()
	defer fake.indexEntryFinishedAddingMutex.RUnlock()
	argsForCall := fake.indexEntryFinishedAddingArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeReporter) IndexEntryStartedAdding(arg1 string, arg2 string) {
	fake.indexEntryStartedAddingMutex.Lock()
	fake.indexEntryStartedAddingArgsForCall = append(fake.indexEntryStartedAddingArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.IndexEntryStartedAddingStub
	fake.recordInvocation("IndexEntryStartedAdding", []interface{}{arg1, arg2})
	fake.indexEntryStartedAddingMutex.Unlock()
	if stub != nil {
		fake.IndexEntryStartedAddingStub(arg1, arg2)
	}
}

func (fake *FakeReporter) IndexEntryStartedAddingCallCount() int {
	fake.indexEntryStartedAddingMutex.RLock()
	defer fake.indexEntryStartedAddingMutex.RUnlock()
	return len(fake.indexEntryStartedAddingArgsForCall)
}

func (fake *FakeReporter) IndexEntryStartedAddingCalls(stub func(string, string)) {
	fake.indexEntryStartedAddingMutex.Lock()
	defer fake.indexEntryStartedAddingMutex.Unlock()
	fake.IndexEntryStartedAddingStub = stub
}

func (fake *FakeReporter) IndexEntryStartedAddingArgsForCall(i int) (string, string) {
	fake.indexEntryStartedAddingMutex.RLock()
	defer fake.indexEntryStartedAddingMutex.RUnlock()
	argsForCall := fake.indexEntryStartedAddingArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeReporter) IndexEntryUploadFinished(arg1 string, arg2 string, arg3 error) {
	fake.indexEntryUploadFinishedMutex.Lock()
	fake.indexEntryUploadFinishedArgsForCall = append(fake.indexEntryUploadFinishedArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 error
	}{arg1, arg2, arg3})
	stub := fake.IndexEntryUploadFinishedStub
	fake.recordInvocation("IndexEntryUploadFinished", []interface{}{arg1, arg2, arg3})
	fake.indexEntryUploadFinishedMutex.Unlock()
	if stub != nil {
		fake.IndexEntryUploadFinishedStub(arg1, arg2, arg3)
	}
}

func (fake *FakeReporter) IndexEntryUploadFinishedCallCount() int {
	fake.indexEntryUploadFinishedMutex.RLock()
	defer fake.indexEntryUploadFinishedMutex.RUnlock()
	return len(fake.indexEntryUploadFinishedArgsForCall)
}

func (fake *FakeReporter) IndexEntryUploadFinishedCalls(stub func(string, string, error)) {
	fake.indexEntryUploadFinishedMutex.Lock()
	defer fake.indexEntryUploadFinishedMutex.Unlock()
	fake.IndexEntryUploadFinishedStub = stub
}

func (fake *FakeReporter) IndexEntryUploadFinishedArgsForCall(i int) (string, string, error) {
	fake.indexEntryUploadFinishedMutex.RLock()
	defer fake.indexEntryUploadFinishedMutex.RUnlock()
	argsForCall := fake.indexEntryUploadFinishedArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeReporter) IndexEntryUploadStarted(arg1 string, arg2 string) {
	fake.indexEntryUploadStartedMutex.Lock()
	fake.indexEntryUploadStartedArgsForCall = append(fake.indexEntryUploadStartedArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.IndexEntryUploadStartedStub
	fake.recordInvocation("IndexEntryUploadStarted", []interface{}{arg1, arg2})
	fake.indexEntryUploadStartedMutex.Unlock()
	if stub != nil {
		fake.IndexEntryUploadStartedStub(arg1, arg2)
	}
}

func (fake *FakeReporter) IndexEntryUploadStartedCallCount() int {
	fake.indexEntryUploadStartedMutex.RLock()
	defer fake.indexEntryUploadStartedMutex.RUnlock()
	return len(fake.indexEntryUploadStartedArgsForCall)
}

func (fake *FakeReporter) IndexEntryUploadStartedCalls(stub func(string, string)) {
	fake.indexEntryUploadStartedMutex.Lock()
	defer fake.indexEntryUploadStartedMutex.Unlock()
	fake.IndexEntryUploadStartedStub = stub
}

func (fake *FakeReporter) IndexEntryUploadStartedArgsForCall(i int) (string, string) {
	fake.indexEntryUploadStartedMutex.RLock()
	defer fake.indexEntryUploadStartedMutex.RUnlock()
	argsForCall := fake.indexEntryUploadStartedArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeReporter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.indexEntryDownloadFinishedMutex.RLock()
	defer fake.indexEntryDownloadFinishedMutex.RUnlock()
	fake.indexEntryDownloadStartedMutex.RLock()
	defer fake.indexEntryDownloadStartedMutex.RUnlock()
	fake.indexEntryFinishedAddingMutex.RLock()
	defer fake.indexEntryFinishedAddingMutex.RUnlock()
	fake.indexEntryStartedAddingMutex.RLock()
	defer fake.indexEntryStartedAddingMutex.RUnlock()
	fake.indexEntryUploadFinishedMutex.RLock()
	defer fake.indexEntryUploadFinishedMutex.RUnlock()
	fake.indexEntryUploadStartedMutex.RLock()
	defer fake.indexEntryUploadStartedMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeReporter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ index.Reporter = new(FakeReporter)
