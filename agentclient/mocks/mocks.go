// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cloudfoundry/bosh-agent/agentclient (interfaces: AgentClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	agentclient "github.com/cloudfoundry/bosh-agent/agentclient"
	applyspec "github.com/cloudfoundry/bosh-agent/agentclient/applyspec"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockAgentClient is a mock of AgentClient interface
type MockAgentClient struct {
	ctrl     *gomock.Controller
	recorder *MockAgentClientMockRecorder
}

// MockAgentClientMockRecorder is the mock recorder for MockAgentClient
type MockAgentClientMockRecorder struct {
	mock *MockAgentClient
}

// NewMockAgentClient creates a new mock instance
func NewMockAgentClient(ctrl *gomock.Controller) *MockAgentClient {
	mock := &MockAgentClient{ctrl: ctrl}
	mock.recorder = &MockAgentClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAgentClient) EXPECT() *MockAgentClientMockRecorder {
	return m.recorder
}

// AddPersistentDisk mocks base method
func (m *MockAgentClient) AddPersistentDisk(arg0 string, arg1 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPersistentDisk", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPersistentDisk indicates an expected call of AddPersistentDisk
func (mr *MockAgentClientMockRecorder) AddPersistentDisk(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPersistentDisk", reflect.TypeOf((*MockAgentClient)(nil).AddPersistentDisk), arg0, arg1)
}

// Apply mocks base method
func (m *MockAgentClient) Apply(arg0 applyspec.ApplySpec) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Apply", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Apply indicates an expected call of Apply
func (mr *MockAgentClientMockRecorder) Apply(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockAgentClient)(nil).Apply), arg0)
}

// CompilePackage mocks base method
func (m *MockAgentClient) CompilePackage(arg0 agentclient.BlobRef, arg1 []agentclient.BlobRef) (agentclient.BlobRef, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompilePackage", arg0, arg1)
	ret0, _ := ret[0].(agentclient.BlobRef)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CompilePackage indicates an expected call of CompilePackage
func (mr *MockAgentClientMockRecorder) CompilePackage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompilePackage", reflect.TypeOf((*MockAgentClient)(nil).CompilePackage), arg0, arg1)
}

// DeleteARPEntries mocks base method
func (m *MockAgentClient) DeleteARPEntries(arg0 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteARPEntries", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteARPEntries indicates an expected call of DeleteARPEntries
func (mr *MockAgentClientMockRecorder) DeleteARPEntries(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteARPEntries", reflect.TypeOf((*MockAgentClient)(nil).DeleteARPEntries), arg0)
}

// Drain mocks base method
func (m *MockAgentClient) Drain(arg0 string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Drain", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Drain indicates an expected call of Drain
func (mr *MockAgentClientMockRecorder) Drain(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Drain", reflect.TypeOf((*MockAgentClient)(nil).Drain), arg0)
}

// GetState mocks base method
func (m *MockAgentClient) GetState() (agentclient.AgentState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetState")
	ret0, _ := ret[0].(agentclient.AgentState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetState indicates an expected call of GetState
func (mr *MockAgentClientMockRecorder) GetState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetState", reflect.TypeOf((*MockAgentClient)(nil).GetState))
}

// ListDisk mocks base method
func (m *MockAgentClient) ListDisk() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDisk")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDisk indicates an expected call of ListDisk
func (mr *MockAgentClientMockRecorder) ListDisk() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDisk", reflect.TypeOf((*MockAgentClient)(nil).ListDisk))
}

// MigrateDisk mocks base method
func (m *MockAgentClient) MigrateDisk() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MigrateDisk")
	ret0, _ := ret[0].(error)
	return ret0
}

// MigrateDisk indicates an expected call of MigrateDisk
func (mr *MockAgentClientMockRecorder) MigrateDisk() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MigrateDisk", reflect.TypeOf((*MockAgentClient)(nil).MigrateDisk))
}

// MountDisk mocks base method
func (m *MockAgentClient) MountDisk(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MountDisk", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// MountDisk indicates an expected call of MountDisk
func (mr *MockAgentClientMockRecorder) MountDisk(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MountDisk", reflect.TypeOf((*MockAgentClient)(nil).MountDisk), arg0)
}

// Ping mocks base method
func (m *MockAgentClient) Ping() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ping indicates an expected call of Ping
func (mr *MockAgentClientMockRecorder) Ping() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockAgentClient)(nil).Ping))
}

// RemovePersistentDisk mocks base method
func (m *MockAgentClient) RemovePersistentDisk(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemovePersistentDisk", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemovePersistentDisk indicates an expected call of RemovePersistentDisk
func (mr *MockAgentClientMockRecorder) RemovePersistentDisk(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePersistentDisk", reflect.TypeOf((*MockAgentClient)(nil).RemovePersistentDisk), arg0)
}

// RunScript mocks base method
func (m *MockAgentClient) RunScript(arg0 string, arg1 map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunScript", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunScript indicates an expected call of RunScript
func (mr *MockAgentClientMockRecorder) RunScript(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunScript", reflect.TypeOf((*MockAgentClient)(nil).RunScript), arg0, arg1)
}

// Start mocks base method
func (m *MockAgentClient) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start
func (mr *MockAgentClientMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockAgentClient)(nil).Start))
}

// Stop mocks base method
func (m *MockAgentClient) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop
func (mr *MockAgentClientMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockAgentClient)(nil).Stop))
}

// SyncDNS mocks base method
func (m *MockAgentClient) SyncDNS(arg0, arg1 string, arg2 uint64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncDNS", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SyncDNS indicates an expected call of SyncDNS
func (mr *MockAgentClientMockRecorder) SyncDNS(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncDNS", reflect.TypeOf((*MockAgentClient)(nil).SyncDNS), arg0, arg1, arg2)
}

// UnmountDisk mocks base method
func (m *MockAgentClient) UnmountDisk(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnmountDisk", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnmountDisk indicates an expected call of UnmountDisk
func (mr *MockAgentClientMockRecorder) UnmountDisk(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnmountDisk", reflect.TypeOf((*MockAgentClient)(nil).UnmountDisk), arg0)
}
