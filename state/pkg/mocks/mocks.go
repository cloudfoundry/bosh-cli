// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cloudfoundry/bosh-cli/state/pkg (interfaces: Compiler,CompiledPackageRepo)

// Package mocks is a generated GoMock package.
package mocks

import (
	pkg "github.com/cloudfoundry/bosh-cli/release/pkg"
	pkg0 "github.com/cloudfoundry/bosh-cli/state/pkg"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCompiler is a mock of Compiler interface
type MockCompiler struct {
	ctrl     *gomock.Controller
	recorder *MockCompilerMockRecorder
}

// MockCompilerMockRecorder is the mock recorder for MockCompiler
type MockCompilerMockRecorder struct {
	mock *MockCompiler
}

// NewMockCompiler creates a new mock instance
func NewMockCompiler(ctrl *gomock.Controller) *MockCompiler {
	mock := &MockCompiler{ctrl: ctrl}
	mock.recorder = &MockCompilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCompiler) EXPECT() *MockCompilerMockRecorder {
	return m.recorder
}

// Compile mocks base method
func (m *MockCompiler) Compile(arg0 pkg.Compilable) (pkg0.CompiledPackageRecord, bool, error) {
	ret := m.ctrl.Call(m, "Compile", arg0)
	ret0, _ := ret[0].(pkg0.CompiledPackageRecord)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Compile indicates an expected call of Compile
func (mr *MockCompilerMockRecorder) Compile(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Compile", reflect.TypeOf((*MockCompiler)(nil).Compile), arg0)
}

// MockCompiledPackageRepo is a mock of CompiledPackageRepo interface
type MockCompiledPackageRepo struct {
	ctrl     *gomock.Controller
	recorder *MockCompiledPackageRepoMockRecorder
}

// MockCompiledPackageRepoMockRecorder is the mock recorder for MockCompiledPackageRepo
type MockCompiledPackageRepoMockRecorder struct {
	mock *MockCompiledPackageRepo
}

// NewMockCompiledPackageRepo creates a new mock instance
func NewMockCompiledPackageRepo(ctrl *gomock.Controller) *MockCompiledPackageRepo {
	mock := &MockCompiledPackageRepo{ctrl: ctrl}
	mock.recorder = &MockCompiledPackageRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCompiledPackageRepo) EXPECT() *MockCompiledPackageRepoMockRecorder {
	return m.recorder
}

// Find mocks base method
func (m *MockCompiledPackageRepo) Find(arg0 pkg.Compilable) (pkg0.CompiledPackageRecord, bool, error) {
	ret := m.ctrl.Call(m, "Find", arg0)
	ret0, _ := ret[0].(pkg0.CompiledPackageRecord)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Find indicates an expected call of Find
func (mr *MockCompiledPackageRepoMockRecorder) Find(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockCompiledPackageRepo)(nil).Find), arg0)
}

// Save mocks base method
func (m *MockCompiledPackageRepo) Save(arg0 pkg.Compilable, arg1 pkg0.CompiledPackageRecord) error {
	ret := m.ctrl.Call(m, "Save", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockCompiledPackageRepoMockRecorder) Save(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockCompiledPackageRepo)(nil).Save), arg0, arg1)
}
