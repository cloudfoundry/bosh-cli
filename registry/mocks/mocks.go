// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cloudfoundry/bosh-cli/registry (interfaces: Server,ServerManager)

// Package mocks is a generated GoMock package.
package mocks

import (
	registry "github.com/cloudfoundry/bosh-cli/registry"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockServer is a mock of Server interface
type MockServer struct {
	ctrl     *gomock.Controller
	recorder *MockServerMockRecorder
}

// MockServerMockRecorder is the mock recorder for MockServer
type MockServerMockRecorder struct {
	mock *MockServer
}

// NewMockServer creates a new mock instance
func NewMockServer(ctrl *gomock.Controller) *MockServer {
	mock := &MockServer{ctrl: ctrl}
	mock.recorder = &MockServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockServer) EXPECT() *MockServerMockRecorder {
	return m.recorder
}

// Stop mocks base method
func (m *MockServer) Stop() error {
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop
func (mr *MockServerMockRecorder) Stop() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockServer)(nil).Stop))
}

// MockServerManager is a mock of ServerManager interface
type MockServerManager struct {
	ctrl     *gomock.Controller
	recorder *MockServerManagerMockRecorder
}

// MockServerManagerMockRecorder is the mock recorder for MockServerManager
type MockServerManagerMockRecorder struct {
	mock *MockServerManager
}

// NewMockServerManager creates a new mock instance
func NewMockServerManager(ctrl *gomock.Controller) *MockServerManager {
	mock := &MockServerManager{ctrl: ctrl}
	mock.recorder = &MockServerManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockServerManager) EXPECT() *MockServerManagerMockRecorder {
	return m.recorder
}

// Start mocks base method
func (m *MockServerManager) Start(arg0, arg1, arg2 string, arg3 int) (registry.Server, error) {
	ret := m.ctrl.Call(m, "Start", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(registry.Server)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Start indicates an expected call of Start
func (mr *MockServerManagerMockRecorder) Start(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockServerManager)(nil).Start), arg0, arg1, arg2, arg3)
}
